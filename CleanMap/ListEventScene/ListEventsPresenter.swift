//
//  ListEventsPresenter.swift
//  CleanMap
//
//  Created by Paul Lee on 2018/5/30.
//  Copyright (c) 2018å¹´ Paul Lee. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListEventsPresentationLogic {
  func presentFetchedEvents(response: ListEvents.FetchEvents.Response)
}

class ListEventsPresenter: ListEventsPresentationLogic {
  weak var viewController: ListEventsDisplayLogic?
  
  //MARK: - FetchEvents
  func presentFetchedEvents(response: ListEvents.FetchEvents.Response) {
    typealias DisplayedEvent = ListEvents.FetchEvents.ViewModel.DisplayedEvent
    guard let events = response.events else {
      return
    }
    
    let displayedEvents: [DisplayedEvent] = events.map {
      
      let eventSecondSince1970 = $0.time * pow(10, -3)
      let eventDate = Date(timeIntervalSince1970: eventSecondSince1970)
      
      let localFormate = DateFormatter.dateFormat(fromTemplate: "EEEEdMMMhmm", options: 0, locale: Locale.current)
      let formatter = DateFormatter()
      formatter.dateFormat = localFormate

      let dateTime = formatter.string(from: eventDate)
      let  urls: [String] = $0.rsvpMembers.map { return $0.thumbnail }
                                          .filter{ $0 != "" }
      
      return DisplayedEvent(id: $0.id,
                            name: $0.name,
                            groupName: $0.group.name,
                            dateTime: dateTime,
                            venueName: $0.venue?.name ?? "",
                            yesRsvpCount: "\($0.yesRsvpCount)",
                            avatorUrls: urls)
    }
    
    let viewModel = ListEvents.FetchEvents.ViewModel(displayedEvents: displayedEvents)
    viewController?.displayFetchedEvents(viewModel: viewModel)
  }
}
