//
//  ListEventsViewController.swift
//  CleanMap
//
//  Created by Paul Lee on 2018/5/30.
//  Copyright (c) 2018å¹´ Paul Lee. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import KRPullLoader

protocol ListEventsDisplayLogic: class {
  func displayFetchedEvents(viewModel: ListEvents.FetchEvents.ViewModel)
}

class ListEventsVC: UITableViewController, ListEventsDisplayLogic {
  var interactor: ListEventsBusinessLogic?
  var router: (NSObjectProtocol & ListEventsRoutingLogic & ListEventsDataPassing)?

  // MARK: Object lifecycle

  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }

  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }

  // MARK: Setup

  private func setup() {
    let viewController = self
    let interactor = ListEventsInteractor()
    let presenter = ListEventsPresenter()
    let router = ListEventsRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }

  // MARK: Routing

  override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }

  // MARK: View lifecycle

  override func viewDidLoad() {
    super.viewDidLoad()
    configureTableView()
    configureLoadingView()
    fetchEventsOnLoad()
    
  }
  
  private func configureLoadingView() {
    let loadMoreView = KRPullLoadView()
    loadMoreView.delegate = self
    tableView.addPullLoadableView(loadMoreView, type: .loadMore)
    
  }
  
  private func configureTableView() {
    tableView.register(R.nib.eventTableViewCell)
    tableView.rowHeight = UITableViewAutomaticDimension
    tableView.estimatedRowHeight = 300
    
  }
  
  
  //MARK: - FetchEvents
  var offset = 0
  var pagesPerFetch = 5
  private func fetchEventsOnLoad() {
    let rq = ListEvents.FetchEvents.Request(page: pagesPerFetch, offset: 0)
    interactor?.fetchEvents(request: rq)
    
  }
  private func fetchMoreEvents() {
    offset += 1
    let rq = ListEvents.FetchEvents.Request(page: pagesPerFetch, offset: offset)
    interactor?.fetchEvents(request: rq)
  }
  
  
  var displayedEvents: [ListEvents.FetchEvents.ViewModel.DisplayedEvent] = []
  var loadMoreAnimationHandler: (() -> Void)?
  func displayFetchedEvents(viewModel: ListEvents.FetchEvents.ViewModel) {
    guard let newFetchedDisplayedEvents = viewModel.displayedEvents else {
      return
    }
    
    displayedEvents += newFetchedDisplayedEvents
    tableView.reloadData()
    loadMoreAnimationHandler?()
    loadMoreAnimationHandler = nil

  }
  
  
  //MARK: - tableView Data Source
  override func numberOfSections(in tableView: UITableView) -> Int {
    return 1
  }
  
  override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
    return displayedEvents.count
  }
  
  override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
    guard let cell = tableView.dequeueReusableCell(withIdentifier: R.reuseIdentifier.eventTableViewCell, for: indexPath) else {
      fatalError()
    }
    
    let displayedEvent = displayedEvents[indexPath.row]
    
    cell.rsvpView.avatorUrls = displayedEvent.avatorUrls
    cell.nameLabel.text = displayedEvent.name
    cell.groupNameLabel.text = displayedEvent.groupName
    cell.dateTimeLabel.text = displayedEvent.dateTime
    cell.venueNameLabel.text = displayedEvent.venueName
    cell.rsvpView.rsvpLabel.text = displayedEvent.yesRsvpCount
    cell.rsvpView.loadImagesFromUrls()
    
    return cell
    
  }
  
  
  override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
    router?.routeToShowEventDetail(segue: nil)
  }
  
  
  
}

extension ListEventsVC: KRPullLoadViewDelegate {
  func pullLoadView(_ pullLoadView: KRPullLoadView, didChangeState state: KRPullLoaderState, viewType type: KRPullLoaderType) {
    guard type == .loadMore else {
      return
    }
    
    if case let .loading(animationHanlder) = state {
      loadMoreAnimationHandler = animationHanlder
      fetchMoreEvents()
      
    }
    
  }
  

}

