//
//  ShowEventDetailPresenter.swift
//  CleanMap
//
//  Created by Paul Lee on 2018/6/17.
//  Copyright (c) 2018å¹´ Paul Lee. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import GoogleMaps

protocol ShowEventDetailPresentationLogic {
  func presentSomething(response: ShowEventDetail.Something.Response)
  func presentDetailedEvent(response: ShowEventDetail.getEvent.Response)
}

class ShowEventDetailPresenter: ShowEventDetailPresentationLogic {
  weak var viewController: ShowEventDetailDisplayLogic?

  // MARK: Do something
  func presentSomething(response: ShowEventDetail.Something.Response) {
    let viewModel = ShowEventDetail.Something.ViewModel()
    viewController?.displaySomething(viewModel: viewModel)
  }
  
  //MARK: - get event
  func presentDetailedEvent(response: ShowEventDetail.getEvent.Response) {
    
    let event = response.event
    
    //formate date
    let duration = event.duration ?? 10800000
    let eventStartSecondSince1970 = event.time * pow(10, -3)
    let eventEndSecondSince1970 = (event.time + duration) * pow(10, -3)
    let startDate = Date(timeIntervalSince1970: eventStartSecondSince1970)
    let endDate = Date(timeIntervalSince1970: eventEndSecondSince1970)
    
    let formatter = DateFormatter()
    
    let localTimeFormate = DateFormatter.dateFormat(fromTemplate: "hmm", options: 0, locale: Locale.current)
    formatter.dateFormat = localTimeFormate
    let startDateTime = formatter.string(from: startDate)
    let endDateTime = formatter.string(from: endDate)
    let dateTime = startDateTime + " - " + endDateTime
    
    let localDateFormate = DateFormatter.dateFormat(fromTemplate: "EEEEdMMM", options: 0, locale: Locale.current)
    formatter.dateFormat = localDateFormate
    let date = formatter.string(from: startDate)
    
    //formate text
    let name = event.name
    let venueName = event.venue?.name ?? ""
    let address = event.venue?.address1 ?? ""
    let hosters = "Hosted by " + event.rsvpMembers.filter { $0.isHoster == true }.map { $0.name  }.joined(separator: ", ")
    
    //formate map pin
    let lat = event.venue?.latitude ?? event.group.latitude
    let lon = event.venue?.longitude ?? event.group.longitude
    let marker = GMSMarker()
    marker.position = CLLocationCoordinate2D(latitude: lat, longitude: lon)
    marker.title = venueName
    marker.snippet = address
    
    let camera = GMSCameraPosition.camera(withTarget: marker.position, zoom: 16.0)
    
    typealias DisplayedEvent = ShowEventDetail.getEvent.ViewModel.DisplayedEvent
    let detailedEvent = DisplayedEvent(name: name,
                                       date: date,
                                       startAndEndTime: dateTime,
                                       venueName: venueName,
                                       address: address,
                                       hosters: hosters,
                                       marker: marker,
                                       camera: camera)
    let viewModel = ShowEventDetail.getEvent.ViewModel(displayedEvent: detailedEvent)
    viewController?.displayEvent(viewModel: viewModel)
    
    
  }
}
