//
//  ShowEventDetailViewController.swift
//  CleanMap
//
//  Created by Paul Lee on 2018/6/17.
//  Copyright (c) 2018å¹´ Paul Lee. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import GooglePlaces
import GoogleMaps

protocol ShowEventDetailDisplayLogic: class {
  func displaySomething(viewModel: ShowEventDetail.Something.ViewModel)
  func displayEvent(viewModel: ShowEventDetail.getEvent.ViewModel)
}

class ShowEventDetailVC: UIViewController, ShowEventDetailDisplayLogic {
  
  var interactor: ShowEventDetailBusinessLogic?
  var router: (NSObjectProtocol & ShowEventDetailRoutingLogic & ShowEventDetailDataPassing)?

  // MARK: Object lifecycle

  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }

  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }

  // MARK: Setup

  private func setup() {
    let viewController = self
    let interactor = ShowEventDetailInteractor()
    let presenter = ShowEventDetailPresenter()
    let router = ShowEventDetailRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }

  // MARK: Routing

  override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }

  // MARK: View lifecycle

  override func viewDidLoad() {
    super.viewDidLoad()
    doSomething()
    mapView.isMyLocationEnabled = true
  }

  override func viewWillAppear(_ animated: Bool) {
    super.viewWillAppear(animated)
    getEvent()
  }
  
  // MARK: Do something

  //@IBOutlet weak var nameTextField: UITextField!

  func doSomething() {
    let request = ShowEventDetail.Something.Request()
    interactor?.doSomething(request: request)
  }
  
  func displaySomething(viewModel: ShowEventDetail.Something.ViewModel) {
    //nameTextField.text = viewModel.name
    
  }
  
  //MARK: - get event
  func getEvent() {
    let rq = ShowEventDetail.getEvent.Request()
    interactor?.getEvent(request: rq)
    
  }
  
  @IBOutlet weak var eventNameLabel: UILabel!
  @IBOutlet weak var venueNameLabel: UILabel!
  @IBOutlet weak var addressLabel: UILabel!
  @IBOutlet weak var dateLabel: UILabel!
  @IBOutlet weak var timeLabel: UILabel!
  @IBOutlet weak var hosterLabel: UILabel!
  @IBOutlet weak var mapView: GMSMapView!
  
  func displayEvent(viewModel: ShowEventDetail.getEvent.ViewModel) {
    let detailedEvent = viewModel.displayedEvent
    eventNameLabel.text = detailedEvent.name
    venueNameLabel.text = detailedEvent.venueName
    addressLabel.text = detailedEvent.address
    timeLabel.text = detailedEvent.startAndEndTime
    hosterLabel.text = detailedEvent.hosters
    
    mapView.camera = detailedEvent.camera
    detailedEvent.marker.map = mapView
  }

  
}
