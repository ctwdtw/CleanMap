//
//  ListEventsPresenterTests.swift
//  CleanMap
//
//  Created by Paul Lee on 2018/5/30.
//  Copyright (c) 2018年 Paul Lee. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import CleanMap
import XCTest

class ListEventsPresenterTests: XCTestCase {
  // MARK: Subject under test

  var sut: ListEventsPresenter!

  // MARK: Test lifecycle

  override func setUp() {
    super.setUp()
    setupListEventsPresenter()
  }

  override func tearDown() {
    super.tearDown()
  }

  // MARK: Test setup

  func setupListEventsPresenter() {
    sut = ListEventsPresenter()
  }

  // MARK: Test doubles

  class ListEventsDisplayLogicSpy: ListEventsDisplayLogic {
    var displayFormattedEventsCalled = false
    var viewModel: ListEvents.FetchEvents.ViewModel?
    func displayFetchedEvents(viewModel: ListEvents.FetchEvents.ViewModel) {
      displayFormattedEventsCalled = true
      self.viewModel = viewModel
    }
    
  }

  // MARK: Tests
    
  func test_presentFetchedEvents_formateEventsToDisplayedEvents() {
    //given
    let events = [Seed.event1]
    let respone = ListEvents.FetchEvents.Response(events: events, error: nil)
    
    let ListEventsVCspy = ListEventsDisplayLogicSpy()
    sut.viewController = ListEventsVCspy
    
    //when
    sut.presentFetchedEvents(response: respone)
    
    //then
    guard let displayedEvents = ListEventsVCspy.viewModel?.displayedEvents else {
      XCTFail("presentFetchedEvents(response:) should pass viewModel which contains displayed events to view controller")
      return
    }
    
    for event in displayedEvents {
      XCTAssertEqual(event.groupName, Seed.event1.group.name)
      XCTAssertEqual(event.name, Seed.event1.name)
      XCTAssertEqual(event.dateTime, "6月5日 星期二 下午7:00")
      XCTAssertEqual(event.venueName, Seed.event1.venue?.name)
      XCTAssertEqual(event.yesRsvpCount, "\(Seed.event1.yesRsvpCount)")
    }
    
    
  }
  
  
  func test_presentFetchedEvents_askViewControllerDisplayFormattedEvents() {
    //given
    let spy = ListEventsDisplayLogicSpy()
    sut.viewController = spy
    let response = ListEvents.FetchEvents.Response(events: [], error: nil)
    
    //when
    sut.presentFetchedEvents(response: response)
    
    //then
    XCTAssert(spy.displayFormattedEventsCalled, "presentEvents(response:) should ask the view controller to display formatted Events")
  }
  
}
