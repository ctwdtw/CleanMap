//
//  ListEventsViewControllerTests.swift
//  CleanMap
//
//  Created by Paul Lee on 2018/5/30.
//  Copyright (c) 2018年 Paul Lee. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import CleanMap
import XCTest


class ListEventsVCTests: XCTestCase {
  // MARK: Subject under test

  var sut: ListEventsVC!
  var window: UIWindow!

  // MARK: Test lifecycle

  override func setUp() {
    super.setUp()
    window = UIWindow()
    setupListEventsViewController()
  }

  override func tearDown() {
    window = nil
    super.tearDown()
  }

  // MARK: Test setup

  func setupListEventsViewController() {
    sut = R.storyboard.main.listEventsVC()
  }

  func loadView() {
    window.addSubview(sut.view)
    RunLoop.current.run(until: Date())
  }

  // MARK: Test doubles

  class ListEventsBusinessLogicSpy: ListEventsBusinessLogic {
    var fetchEventsCalled = false
    
    func fetchEvents(request: ListEvents.FetchEvents.Request) {
      fetchEventsCalled = true
    }
    
  }
  
  class TableViewSpy: UITableView {
    var reloadDataIsCalled = false
    override func reloadData() {
      reloadDataIsCalled = true
    }
  }

  // MARK: Tests
  
  func test_shouldFetchEvents_when_viewIsLoaded() {
    // given
    let spy = ListEventsBusinessLogicSpy()
    sut.interactor = spy
    
    //when
    loadView()
    
    //then
    XCTAssert(spy.fetchEventsCalled, "viewDidLoad(animated:) should ask the interactor to fetch events")
    
  }
  
  func test_displayFetchedEvents_shouldDisplayFetchedEventsUntoTableView() {
    //given
    let tableViewSpy = TableViewSpy()
    sut.tableView = tableViewSpy
    let event = Seed.event1
    typealias DisplayedEvent = ListEvents.FetchEvents.ViewModel.DisplayedEvent
    let displayedEvent = DisplayedEvent(id: event.id,
                                        name: event.name,
                                        groupName: event.group.name,
                                        dateTime: "6月5日 星期二 下午7:00",
                                        venueName: event.venue?.name ?? "",
                                        yesRsvpCount: "\(event.yesRsvpCount)",
                                        avatorUrls: ["","",""])
    let viewModel = ListEvents.FetchEvents.ViewModel(displayedEvents: [displayedEvent])
    
    //when
    sut.displayFetchedEvents(viewModel: viewModel)
    
    //then
    XCTAssert(tableViewSpy.reloadDataIsCalled, "Displaying fetched orders should reload the table view")
    XCTAssertNotNil(sut.displayedEvents)
  }
  
  func test_tableViewNumberOfSection_equalsOne() {
    // given
    let tableView = sut.tableView
    
    // when
    let numberOfSections = sut.numberOfSections(in: tableView!)
    
    // then
    XCTAssertEqual(numberOfSections, 1, "The number of table view sections should always be 1")
  }
  
  func test_tableViewNumberOfRowsInSections_equalsDisplayedEventsCount() {
    //given
    let tableView = sut.tableView
    let event = Seed.event1
    
    typealias DisplayedEvent = ListEvents.FetchEvents.ViewModel.DisplayedEvent
    let testDisplayedEvent = DisplayedEvent(id: event.id,
                                        name: event.name,
                                        groupName: event.group.name,
                                        dateTime: "6月5日 星期二 下午7:00",
                                        venueName: event.venue?.name ?? "",
                                        yesRsvpCount: "\(event.yesRsvpCount)",
                                        avatorUrls: ["","",""])
    sut.displayedEvents = [testDisplayedEvent]
    //when
    let numberOfRows = sut.tableView(tableView!, numberOfRowsInSection: 0)
    
    //then
    XCTAssertEqual(numberOfRows, sut.displayedEvents.count)
    
  }
  
  func test_tableViewCellForRowAtIndexPath_shouldDisplayEventOnCell() {
    //given
    let tableView = sut.tableView
    let indexPath = IndexPath(row: 0, section: 0)
    let event = Seed.event1
    typealias DisplayedEvent = ListEvents.FetchEvents.ViewModel.DisplayedEvent
    let testDisplayedEvent = DisplayedEvent(id: event.id,
                                            name: event.name,
                                            groupName: event.group.name,
                                            dateTime: "6月5日 星期二 下午7:00",
                                            venueName: event.venue?.name ?? "",
                                            yesRsvpCount: "\(event.yesRsvpCount)",
                                            avatorUrls: ["","",""])
    sut.displayedEvents = [testDisplayedEvent]
    //when
    guard let cell = sut.tableView(tableView!, cellForRowAt: indexPath) as? EventTableViewCell else {
      XCTFail("cell type should be EventTableViewCell")
      return
    }
    
    //then
    XCTAssertEqual(cell.nameLabel.text, testDisplayedEvent.name)
    XCTAssertEqual(cell.groupNameLabel.text, testDisplayedEvent.groupName)
    XCTAssertEqual(cell.dateTimeLabel.text, testDisplayedEvent.dateTime)
    XCTAssertEqual(cell.rsvpView.rsvpLabel.text, testDisplayedEvent.yesRsvpCount)
    
  }
  
  
  
}
