//
//  ListEventsInteractorTests.swift
//  CleanMap
//
//  Created by Paul Lee on 2018/5/30.
//  Copyright (c) 2018å¹´ Paul Lee. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import CleanMap
import XCTest

class ListEventsInteractorTests: XCTestCase {
  // MARK: Subject under test

  var sut: ListEventsInteractor!

  // MARK: Test lifecycle

  override func setUp() {
    super.setUp()
    setupListEventsInteractor()
  }

  override func tearDown() {
    super.tearDown()
  }

  // MARK: Test setup

  func setupListEventsInteractor() {
    sut = ListEventsInteractor()
  }

  // MARK: Test doubles

  class ListEventsPresentationLogicSpy: ListEventsPresentationLogic {
    var presentFetchedResultCalled = false
    func presentFetchedEvents(response: ListEvents.FetchEvents.Response) {
     presentFetchedResultCalled = true
    }
  }
  
  class EventsWorkerSpy: EventsWorker {
    var isCalled = false
    
    override func fetchEvents(request: ListEvents.FetchEvents.Request, completion: @escaping (Result<[Event]>) -> Void) {
      isCalled = true
      let result = Result<[Event]>.value([])
      completion(result)

    }
    
    
  }

  // MARK: Tests
  
  //testFetchOrdersShouldAskOrdersWorkerToFetchOrdersAndPresenterToFormatResult
  func test_fetchEvents_askPresenterToFormateFetchedResult() {
    //given
    let request = ListEvents.FetchEvents.Request() //input
    let presenterSpy = ListEventsPresentationLogicSpy()
    let memStore = EventsMemStore()
    let eventWorkerSpy = EventsWorkerSpy(store: memStore)
    
    sut.presenter = presenterSpy //inject
    sut.worker = eventWorkerSpy
    
    
    //when
    sut.fetchEvents(request: request)
    
    //then
    XCTAssert(presenterSpy.presentFetchedResultCalled, "fetchEvents(:) should ask presenter to formate fetched result")
    
  }
  
  func test_fetchEvents_askEventsWorkerToFetchEvents() {
    //given
    let request = ListEvents.FetchEvents.Request()
    let memStore = EventsMemStore()
    let eventsWorkerSpy = EventsWorkerSpy(store: memStore)
    sut.worker = eventsWorkerSpy
    
    //when
    sut.fetchEvents(request: request)
    
    //then
    XCTAssert(eventsWorkerSpy.isCalled, "fetchEvents(:) should ask eventsWorker to fecth events")
    
  }
  
  
  
  
  
}
